final int 
  WIDTH = 256,
  HEIGHT = 64,
  SCALE = 4,
  FRAMERATE = 60;

final float
  BREATHE_CYCLE = 3000,
  BREATHE_STRENGTH = 1,
  EMOTION_MIN_DELAY = 10000,
  EMOTION_MAX_DELAY = 30000,
  GLITCH_DURATION = 240,
  GLITCH_MIN_DELAY = 7500,
  GLITCH_MAX_DELAY = 40000,
  HUE_CYCLE = 10000;

final boolean
  HW_ENABLED = true;

final String
  SOCKET_PATH = "/tmp/mbeast_driver.socket";

PGraphics g;
int mx = 0, my = 0;
int lastMillis, now;

int nextGlitch = 0;
int nextEmotionTime = 0;
EyeState emotion = EyeState.Happy;

Eyes eyes;
final float[][] noseShape = Util.getSimpleQuad(-3, -2, 1, -1, 3, 2, -2, 2);
final float[][] mouthHalfShape = {
  {-90, 26},
  {-70, 27, -50, 27, -30, 23},
  {-16, 25},
  { 0, 22}
};

Socket socket;

void setup() {
  size(640, 480, P2D);
  noSmooth();
  frameRate(FRAMERATE);
  windowResize(WIDTH * SCALE, HEIGHT * SCALE);
  
  g = createGraphics(WIDTH, HEIGHT, P2D);
  ((PGraphicsOpenGL) g).textureSampling(2);
  g.noSmooth();
  
  eyes = new Eyes(g, EyeState.Neutral);
  
  if (HW_ENABLED) {
    socket = new Socket(this);
    while (!socket.connect()) delay(1000);
  }
  
//  setupShaders();
  
  now = millis();
  lastMillis = millis();
}

void draw() {
  lastMillis = now;
  now = millis();
/*  float glitch = 0;
  if (nextGlitch < now) {
    if (nextGlitch > now - GLITCH_DURATION) {
      glitch = 1 - (now - nextGlitch) / GLITCH_DURATION;
    } else {
      nextGlitch = now + round(random(GLITCH_MIN_DELAY, GLITCH_MAX_DELAY));
    }
  }
  
  if (nextEmotionTime < now) {
    if (emotion == EyeState.Happy) {
      emotion = EyeState.Neutral;
    } else {
      emotion = EyeState.Happy;
    }
    eyes.setState(emotion);
    nextEmotionTime = now + round(random(EMOTION_MIN_DELAY, EMOTION_MAX_DELAY));
  }*/
  
  background(0);

  g.beginDraw();
  g.clear();
  g.translate(WIDTH / 2, HEIGHT / 2 + BREATHE_STRENGTH * sin(now / BREATHE_CYCLE * 2 * PI) - 8);
  
  g.noStroke();
  g.fill(180, 255, 180);
  
  eyes.tick((now - lastMillis) / 1000.0);
  eyes.draw();
  Util.drawPointSet(g, noseShape, 2, 1.25, -25, -20);
  Util.drawPointSet(g, noseShape, -2, 1.25, 25, -20);
  
  g.noFill();
  g.stroke(180, 255, 180);
  g.strokeWeight(3);
  
  Util.drawPointSet(g, mouthHalfShape, 1, 1, 0, 0);
  Util.drawPointSet(g, mouthHalfShape, -1, 1, 0, 0);
  
  notAProtogen();

  g.endDraw();
  /*
  setShaderParams((now % HUE_CYCLE) / HUE_CYCLE, glitch);
  if (glitch == 0) {
    shader(shaderHue);
  } else {
    shader(shaderChannels);
  }*/
  image(g, 0, 0, WIDTH * SCALE, HEIGHT * SCALE);
  
  if(HW_ENABLED && !socket.connected) {
    delay(500);
    socket.connect();
  }
  
}

void notAProtogen() {
  g.textSize(12);
  g.noStroke();
  g.fill(255, 150, 100, 180);
  float napX = 128 - (millis() % 10000)/2000.0;
  g.text("NOT A PROTOGEN", napX, 24);
}

void keyPressed() {
  switch (key) {
    case '1':
      eyes.setState(EyeState.Neutral);
      break;
    case '2':
      eyes.setState(EyeState.Happy);
      break;
    case '3':
      eyes.setState(EyeState.Upset);
      break;
  }
}
